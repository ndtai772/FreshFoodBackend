// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: order.sql

package db

import (
	"context"
)

const getOrder = `-- name: GetOrder :one
SELECT id, user_id, product_id, quantity, total_price, to_location, is_draft, is_payed, is_shipped, current_location
FROM orders
WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int32) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.TotalPrice,
		&i.ToLocation,
		&i.IsDraft,
		&i.IsPayed,
		&i.IsShipped,
		&i.CurrentLocation,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, user_id, product_id, quantity, total_price, to_location, is_draft, is_payed, is_shipped, current_location
FROM orders
ORDER BY id DESC
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Order{}
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.TotalPrice,
			&i.ToLocation,
			&i.IsDraft,
			&i.IsPayed,
			&i.IsShipped,
			&i.CurrentLocation,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
