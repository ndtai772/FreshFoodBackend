// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: product.sql

package db

import (
	"context"
	"time"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    title,
    price,
    description,
    image_0,
    image_1,
    image_2,
    image_3,
    valid_until
)
VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8
)
RETURNING id, title, price, description, image_0, image_1, image_2, image_3, created_at, valid_until
`

type CreateProductParams struct {
	Title       string    `json:"title"`
	Price       int32     `json:"price"`
	Description string    `json:"description"`
	Image0      string    `json:"image_0"`
	Image1      string    `json:"image_1"`
	Image2      string    `json:"image_2"`
	Image3      string    `json:"image_3"`
	ValidUntil  time.Time `json:"valid_until"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (Product, error) {
	row := q.db.QueryRowContext(ctx, createProduct,
		arg.Title,
		arg.Price,
		arg.Description,
		arg.Image0,
		arg.Image1,
		arg.Image2,
		arg.Image3,
		arg.ValidUntil,
	)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Price,
		&i.Description,
		&i.Image0,
		&i.Image1,
		&i.Image2,
		&i.Image3,
		&i.CreatedAt,
		&i.ValidUntil,
	)
	return i, err
}

const getProduct = `-- name: GetProduct :one
SELECT id, title, price, description, image_0, image_1, image_2, image_3, created_at, valid_until
FROM products
WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Price,
		&i.Description,
		&i.Image0,
		&i.Image1,
		&i.Image2,
		&i.Image3,
		&i.CreatedAt,
		&i.ValidUntil,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, title, price, description, image_0, image_1, image_2, image_3, created_at, valid_until
FROM products
ORDER BY id DESC
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Price,
			&i.Description,
			&i.Image0,
			&i.Image1,
			&i.Image2,
			&i.Image3,
			&i.CreatedAt,
			&i.ValidUntil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
